{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpErrorHandler } from '../error.service';\nimport { catchError } from 'rxjs/internal/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../error.service\";\nexport let VetService = /*#__PURE__*/(() => {\n  class VetService {\n    constructor(http, httpErrorHandler) {\n      this.http = http;\n      this.httpErrorHandler = httpErrorHandler;\n      this.entityUrl = environment.REST_API_URL + 'vets';\n      this.handlerError = httpErrorHandler.createHandleError('OwnerService');\n    }\n\n    getVets() {\n      return this.http.get(this.entityUrl).pipe(catchError(this.handlerError('getVets', [])));\n    }\n\n    getVetById(vetId) {\n      return this.http.get(this.entityUrl + '/' + vetId).pipe(catchError(this.handlerError('getVetById', {})));\n    }\n\n    updateVet(vetId, vet) {\n      return this.http.put(this.entityUrl + '/' + vetId, vet).pipe(catchError(this.handlerError('updateVet', vet)));\n    }\n\n    addVet(vet) {\n      return this.http.post(this.entityUrl, vet).pipe(catchError(this.handlerError('addVet', vet)));\n    }\n\n    deleteVet(vetId) {\n      return this.http.delete(this.entityUrl + '/' + vetId).pipe(catchError(this.handlerError('deleteVet', 0)));\n    }\n\n  }\n\n  VetService.ɵfac = function VetService_Factory(t) {\n    return new (t || VetService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.HttpErrorHandler));\n  };\n\n  VetService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: VetService,\n    factory: VetService.ɵfac\n  });\n  return VetService;\n})();","map":null,"metadata":{},"sourceType":"module"}