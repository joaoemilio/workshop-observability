{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError } from 'rxjs/operators';\nimport { HttpErrorHandler } from '../error.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../error.service\";\nexport let OwnerService = /*#__PURE__*/(() => {\n  class OwnerService {\n    constructor(http, httpErrorHandler) {\n      this.http = http;\n      this.httpErrorHandler = httpErrorHandler;\n      this.entityUrl = environment.REST_API_URL + 'owners';\n      this.handlerError = httpErrorHandler.createHandleError('OwnerService');\n    }\n\n    getOwners() {\n      return this.http.get(this.entityUrl).pipe(catchError(this.handlerError('getOwners', [])));\n    }\n\n    getOwnerById(ownerId) {\n      return this.http.get(this.entityUrl + '/' + ownerId).pipe(catchError(this.handlerError('getOwnerById', {})));\n    }\n\n    addOwner(owner) {\n      return this.http.post(this.entityUrl, owner).pipe(catchError(this.handlerError('addOwner', owner)));\n    }\n\n    updateOwner(ownerId, owner) {\n      return this.http.put(this.entityUrl + '/' + ownerId, owner).pipe(catchError(this.handlerError('updateOwner', owner)));\n    }\n\n    deleteOwner(ownerId) {\n      return this.http.delete(this.entityUrl + '/' + ownerId).pipe(catchError(this.handlerError('deleteOwner', [ownerId])));\n    }\n\n    searchOwners(lastName) {\n      let url = this.entityUrl;\n\n      if (lastName !== undefined) {\n        url += '?lastName=' + lastName;\n      }\n\n      return this.http.get(url).pipe(catchError(this.handlerError('searchOwners', [])));\n    }\n\n  }\n\n  OwnerService.ɵfac = function OwnerService_Factory(t) {\n    return new (t || OwnerService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.HttpErrorHandler));\n  };\n\n  OwnerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: OwnerService,\n    factory: OwnerService.ɵfac\n  });\n  return OwnerService;\n})();","map":null,"metadata":{},"sourceType":"module"}