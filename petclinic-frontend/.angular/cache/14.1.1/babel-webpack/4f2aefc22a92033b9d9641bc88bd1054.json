{"ast":null,"code":"import { throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\n/** Handles HttpClient errors */\n\nexport let HttpErrorHandler = /*#__PURE__*/(() => {\n  class HttpErrorHandler {\n    constructor() {\n      /** Create curried handleError function that already knows the service name */\n      this.createHandleError = (serviceName = '') => (operation = 'operation', result = {}) => this.handleError(serviceName, operation, result);\n    }\n    /**\n     * Returns a function that handles Http operation failures.\n     * @param serviceName = name of the data service that attempted the operation\n     * @param operation - name of the operation that failed\n     * @param result - type of a valid result\n     */\n\n\n    handleError(serviceName = '', operation = 'operation', result = {}) {\n      return error => {\n        let message = error.error instanceof ErrorEvent ? error.error.message : `server returned code ${error.status} with body \"${error.error}\"`;\n        const errorsHeader = error.headers.get('errors');\n\n        if (errorsHeader) {\n          const errors = JSON.parse(errorsHeader); // Retrieve the Spring MVC errorMessage of the first FieldError\n\n          if (errors instanceof Array && errors.length > 0 && errors[0].errorMessage) {\n            message = errors[0].errorMessage;\n          }\n        }\n\n        console.error(error);\n        console.error(`${serviceName}::${operation} failed: ${message}`);\n        return throwError(message);\n      };\n    }\n\n  }\n\n  HttpErrorHandler.ɵfac = function HttpErrorHandler_Factory(t) {\n    return new (t || HttpErrorHandler)();\n  };\n\n  HttpErrorHandler.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpErrorHandler,\n    factory: HttpErrorHandler.ɵfac\n  });\n  return HttpErrorHandler;\n})();","map":null,"metadata":{},"sourceType":"module"}