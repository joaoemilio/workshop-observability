{"ast":null,"code":"import { VetService } from '../vet.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { SpecialtyService } from '../../specialties/specialty.service';\nimport { UntypedFormBuilder, UntypedFormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../specialties/specialty.service\";\nimport * as i3 from \"../vet.service\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/select\";\nimport * as i8 from \"@angular/material/core\";\n\nfunction VetEditComponent_span_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 21);\n    i0.ɵɵtext(1, \"First name is required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction VetEditComponent_span_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 21);\n    i0.ɵɵtext(1, \"First name must be at least 2 characters long\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction VetEditComponent_span_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 21);\n    i0.ɵɵtext(1, \"Last name is required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction VetEditComponent_span_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 21);\n    i0.ɵɵtext(1, \"Last name must be at least 2 characters long\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction VetEditComponent_mat_option_29_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 22);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const specialty_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", specialty_r5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", specialty_r5.name, \" \");\n  }\n}\n\nexport let VetEditComponent = /*#__PURE__*/(() => {\n  class VetEditComponent {\n    constructor(formBuilder, specialtyService, vetService, route, router) {\n      this.formBuilder = formBuilder;\n      this.specialtyService = specialtyService;\n      this.vetService = vetService;\n      this.route = route;\n      this.router = router;\n      this.vet = {};\n      this.specList = [];\n      this.buildForm();\n    }\n\n    buildForm() {\n      this.idCtrl = new UntypedFormControl(null);\n      this.firstNameCtrl = new UntypedFormControl('', [Validators.required, Validators.minLength(2)]);\n      this.lastNameCtrl = new UntypedFormControl('', [Validators.required, Validators.minLength(2)]);\n      this.specialtiesCtrl = new UntypedFormControl(null);\n      this.vetEditForm = this.formBuilder.group({\n        id: this.idCtrl,\n        firstName: this.firstNameCtrl,\n        lastName: this.lastNameCtrl,\n        specialties: this.specialtiesCtrl\n      });\n    }\n\n    compareSpecFn(c1, c2) {\n      return c1 && c2 ? c1.id === c2.id : c1 === c2;\n    }\n\n    initFormValues() {\n      this.idCtrl.setValue(this.vet.id);\n      this.firstNameCtrl.setValue(this.vet.firstName);\n      this.lastNameCtrl.setValue(this.vet.lastName);\n      this.specialtiesCtrl.setValue(this.vet.specialties);\n    }\n\n    ngOnInit() {\n      // we use SpecResolver and VetResolver (get data before init component)\n      this.specList = this.route.snapshot.data.specs;\n      this.vet = this.route.snapshot.data.vet;\n      this.vet.specialties = this.route.snapshot.data.vet.specialties;\n      this.initFormValues();\n    }\n\n    onSubmit(vet) {\n      this.vetService.updateVet(vet.id.toString(), vet).subscribe(res => {\n        console.log('update success');\n        this.gotoVetList();\n      }, error => this.errorMessage = error);\n    }\n\n    gotoVetList() {\n      this.router.navigate(['/vets']);\n    }\n\n  }\n\n  VetEditComponent.ɵfac = function VetEditComponent_Factory(t) {\n    return new (t || VetEditComponent)(i0.ɵɵdirectiveInject(i1.UntypedFormBuilder), i0.ɵɵdirectiveInject(i2.SpecialtyService), i0.ɵɵdirectiveInject(i3.VetService), i0.ɵɵdirectiveInject(i4.ActivatedRoute), i0.ɵɵdirectiveInject(i4.Router));\n  };\n\n  VetEditComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: VetEditComponent,\n    selectors: [[\"app-vet-edit\"]],\n    decls: 37,\n    vars: 24,\n    consts: [[1, \"container-fluid\"], [1, \"container\", \"xd-container\"], [\"id\", \"vet_form\", 1, \"form-horizontal\", 3, \"formGroup\", \"ngSubmit\"], [\"hidden\", \"true\", 1, \"form-group\"], [\"type\", \"text\", \"hidden\", \"true\", \"id\", \"id\", \"name\", \"id\", \"formControlName\", \"id\", 1, \"form-control\"], [1, \"form-group\", \"has-feedback\"], [\"for\", \"firstName\", 1, \"col-sm-2\", \"control-label\"], [1, \"col-sm-10\"], [\"type\", \"text\", \"id\", \"firstName\", \"name\", \"firstName\", \"formControlName\", \"firstName\", 1, \"form-control\"], [\"aria-hidden\", \"true\", 1, \"glyphicon\", \"form-control-feedback\"], [\"class\", \"help-block\", 4, \"ngIf\"], [\"for\", \"lastName\", 1, \"col-sm-2\", \"control-label\"], [\"type\", \"text\", \"id\", \"lastName\", \"name\", \"lastName\", \"formControlName\", \"lastName\", 1, \"form-control\"], [1, \"control-group\"], [1, \"form-group\"], [\"for\", \"spec\", 1, \"col-sm-2\", \"control-label\"], [\"id\", \"spec\", \"name\", \"specialties\", \"formControlName\", \"specialties\", \"multiple\", \"\", 3, \"compareWith\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"col-sm-offset-2\", \"col-sm-10\"], [\"type\", \"button\", 1, \"btn\", \"btn-default\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-default\", 3, \"disabled\"], [1, \"help-block\"], [3, \"value\"]],\n    template: function VetEditComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"h2\");\n        i0.ɵɵtext(3, \"Edit Veterinarian\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"form\", 2);\n        i0.ɵɵlistener(\"ngSubmit\", function VetEditComponent_Template_form_ngSubmit_4_listener() {\n          return ctx.onSubmit(ctx.vetEditForm.value);\n        });\n        i0.ɵɵelementStart(5, \"div\", 3);\n        i0.ɵɵelement(6, \"input\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"div\", 5)(8, \"label\", 6);\n        i0.ɵɵtext(9, \"First Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\", 7);\n        i0.ɵɵelement(11, \"input\", 8)(12, \"span\", 9);\n        i0.ɵɵtemplate(13, VetEditComponent_span_13_Template, 2, 0, \"span\", 10);\n        i0.ɵɵtemplate(14, VetEditComponent_span_14_Template, 2, 0, \"span\", 10);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(15, \"div\", 5)(16, \"label\", 11);\n        i0.ɵɵtext(17, \"Last Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\", 7);\n        i0.ɵɵelement(19, \"input\", 12)(20, \"span\", 9);\n        i0.ɵɵtemplate(21, VetEditComponent_span_21_Template, 2, 0, \"span\", 10);\n        i0.ɵɵtemplate(22, VetEditComponent_span_22_Template, 2, 0, \"span\", 10);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(23, \"div\", 13)(24, \"div\", 14)(25, \"label\", 15);\n        i0.ɵɵtext(26, \"Specialties\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(27, \"mat-form-field\", 7)(28, \"mat-select\", 16);\n        i0.ɵɵtemplate(29, VetEditComponent_mat_option_29_Template, 2, 2, \"mat-option\", 17);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(30, \"div\", 14)(31, \"div\", 18);\n        i0.ɵɵelement(32, \"br\");\n        i0.ɵɵelementStart(33, \"button\", 19);\n        i0.ɵɵlistener(\"click\", function VetEditComponent_Template_button_click_33_listener() {\n          return ctx.gotoVetList();\n        });\n        i0.ɵɵtext(34, \"< Back\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(35, \"button\", 20);\n        i0.ɵɵtext(36, \"Save Vet\");\n        i0.ɵɵelementEnd()()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"formGroup\", ctx.vetEditForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵclassProp(\"has-success\", ctx.firstNameCtrl.dirty && ctx.firstNameCtrl.valid)(\"has-error\", ctx.firstNameCtrl.dirty && !ctx.firstNameCtrl.valid);\n        i0.ɵɵadvance(5);\n        i0.ɵɵclassProp(\"glyphicon-ok\", ctx.firstNameCtrl.valid)(\"glyphicon-remove\", !ctx.firstNameCtrl.valid);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.firstNameCtrl.dirty && ctx.firstNameCtrl.hasError(\"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.firstNameCtrl.dirty && ctx.firstNameCtrl.hasError(\"minlength\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"has-success\", ctx.lastNameCtrl.dirty && ctx.lastNameCtrl.valid)(\"has-error\", ctx.lastNameCtrl.dirty && !ctx.lastNameCtrl.valid);\n        i0.ɵɵadvance(5);\n        i0.ɵɵclassProp(\"glyphicon-ok\", ctx.lastNameCtrl.valid)(\"glyphicon-remove\", !ctx.lastNameCtrl.valid);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.lastNameCtrl.dirty && ctx.lastNameCtrl.hasError(\"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.lastNameCtrl.dirty && ctx.lastNameCtrl.hasError(\"minlength\"));\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"compareWith\", ctx.compareSpecFn);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.specList);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"disabled\", ctx.vetEditForm.invalid);\n      }\n    },\n    dependencies: [i5.NgForOf, i5.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i6.MatFormField, i7.MatSelect, i8.MatOption]\n  });\n  return VetEditComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}