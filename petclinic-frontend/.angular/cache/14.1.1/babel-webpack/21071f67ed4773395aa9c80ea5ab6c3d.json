{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError } from 'rxjs/internal/operators';\nimport { HttpErrorHandler } from '../error.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../error.service\";\nexport let PetTypeService = /*#__PURE__*/(() => {\n  class PetTypeService {\n    constructor(http, httpErrorHandler) {\n      this.http = http;\n      this.httpErrorHandler = httpErrorHandler;\n      this.entityUrl = environment.REST_API_URL + 'pettypes';\n      this.handlerError = httpErrorHandler.createHandleError('OwnerService');\n    }\n\n    getPetTypes() {\n      return this.http.get(this.entityUrl).pipe(catchError(this.handlerError('getPetTypes', [])));\n    }\n\n    getPetTypeById(typeId) {\n      return this.http.get(this.entityUrl + '/' + typeId).pipe(catchError(this.handlerError('getPetTypeById', {})));\n    }\n\n    updatePetType(typeId, petType) {\n      return this.http.put(this.entityUrl + '/' + typeId, petType).pipe(catchError(this.handlerError('updatePetType', petType)));\n    }\n\n    addPetType(petType) {\n      return this.http.post(this.entityUrl, petType).pipe(catchError(this.handlerError('addPetType', petType)));\n    }\n\n    deletePetType(typeId) {\n      return this.http.delete(this.entityUrl + '/' + typeId).pipe(catchError(this.handlerError('deletePetType', 0)));\n    }\n\n  }\n\n  PetTypeService.ɵfac = function PetTypeService_Factory(t) {\n    return new (t || PetTypeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.HttpErrorHandler));\n  };\n\n  PetTypeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PetTypeService,\n    factory: PetTypeService.ɵfac\n  });\n  return PetTypeService;\n})();","map":null,"metadata":{},"sourceType":"module"}