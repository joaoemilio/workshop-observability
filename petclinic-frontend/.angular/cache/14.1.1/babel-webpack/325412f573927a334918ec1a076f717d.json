{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, NgModule, Injectable, Inject, NgZone, ErrorHandler } from '@angular/core';\nimport * as i2 from '@angular/router';\nimport { RouterModule, Router } from '@angular/router';\nimport { apm, ApmBase } from '@elastic/apm-rum';\nimport { afterFrame } from '@elastic/apm-rum-core';\n/**\n * MIT License\n *\n * Copyright (c) 2017-present, Elasticsearch BV\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/router';\nimport * as ɵngcc2 from '@elastic/apm-rum';\nconst APM = new InjectionToken('APM Base Client');\nconst ɵ0 = apm;\nlet ApmModule = /*#__PURE__*/(() => {\n  class ApmModule {}\n\n  ApmModule.ɵfac = function ApmModule_Factory(t) {\n    return new (t || ApmModule)();\n  };\n\n  ApmModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ApmModule\n  });\n  ApmModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [{\n      provide: APM,\n      useValue: ɵ0\n    }],\n    imports: [RouterModule]\n  });\n  return ApmModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ApmModule, {\n    imports: function () {\n      return [RouterModule];\n    }\n  });\n})();\n/**\n * MIT License\n *\n * Copyright (c) 2017-present, Elasticsearch BV\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n */\n\n\nlet ApmService = /*#__PURE__*/(() => {\n  class ApmService {\n    constructor(apm, router, ngZone) {\n      this.apm = apm;\n      this.router = router;\n      this.ngZone = ngZone;\n    }\n\n    init(config) {\n      const apmInstance = this.ngZone.runOutsideAngular(() => this.apm.init(config));\n\n      if (!apmInstance.isActive()) {\n        return apmInstance;\n      }\n      /**\n       * Start listening to route change once we\n       * intiailize to set the correct transaction names\n       */\n\n\n      this.observe();\n      return apmInstance;\n    }\n\n    observe() {\n      let transaction;\n      this.router.events.subscribe(event => {\n        const eventName = event.toString();\n\n        if (eventName.indexOf('NavigationStart') >= 0) {\n          const name = event.url;\n          transaction = this.apm.startTransaction(name, 'route-change', {\n            managed: true,\n            canReuse: true\n          });\n        } else if (eventName.indexOf('NavigationError') >= 0) {\n          transaction && transaction.detectFinish();\n        } else if (eventName.indexOf('NavigationEnd') >= 0) {\n          if (!transaction) {\n            return;\n          }\n          /**\n           * The below logic must be placed in NavigationEnd since\n           * the we depend on the current route state to get the path\n           *\n           * Even If there are any redirects, the router state path\n           * will be matched with the correct url on navigation end\n           *\n           * Traverse the activated route tree to figure out the nested\n           * route path\n           */\n\n\n          const route = this.router.routerState.root.firstChild;\n\n          if (route) {\n            let child = route;\n            let path = '/' + child.routeConfig.path;\n\n            while (child) {\n              child = child.firstChild;\n\n              if (child && child.routeConfig) {\n                const currentPath = child.routeConfig.path;\n                /**\n                 * Ignore empty path's in the route config\n                 */\n\n                if (currentPath) {\n                  path += '/' + currentPath;\n                }\n              }\n            }\n\n            transaction.name = path;\n          }\n\n          afterFrame(() => transaction.detectFinish());\n        }\n      });\n    }\n\n  }\n\n  ApmService.ɵfac = function ApmService_Factory(t) {\n    return new (t || ApmService)(ɵngcc0.ɵɵinject(APM), ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n  };\n\n  ApmService.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function ApmService_Factory() {\n      return new ApmService(i0.ɵɵinject(APM), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i0.NgZone));\n    },\n    token: ApmService,\n    providedIn: \"root\"\n  });\n  return ApmService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * MIT License\n *\n * Copyright (c) 2017-present, Elasticsearch BV\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n */\n\n\nlet ApmErrorHandler = /*#__PURE__*/(() => {\n  class ApmErrorHandler extends ErrorHandler {\n    constructor(apm) {\n      super();\n      this.apm = apm;\n    }\n\n    handleError(error) {\n      this.apm.captureError(error.originalError || error);\n      super.handleError(error);\n    }\n\n  }\n\n  ApmErrorHandler.ɵfac = function ApmErrorHandler_Factory(t) {\n    return new (t || ApmErrorHandler)(ɵngcc0.ɵɵinject(APM));\n  };\n\n  ApmErrorHandler.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ApmErrorHandler,\n    factory: ApmErrorHandler.ɵfac\n  });\n  return ApmErrorHandler;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * MIT License\n *\n * Copyright (c) 2017-present, Elasticsearch BV\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { APM, ApmErrorHandler, ApmModule, ApmService, ɵ0 }; //# sourceMappingURL=elastic-apm-rum-angular.js.map","map":null,"metadata":{},"sourceType":"module"}