{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, NgModule, Injectable, Inject, NgZone, ErrorHandler } from '@angular/core';\nimport * as i2 from '@angular/router';\nimport { RouterModule, Router } from '@angular/router';\nimport { apm, ApmBase } from '@elastic/apm-rum';\nimport { afterFrame } from '@elastic/apm-rum-core';\n/**\n * MIT License\n *\n * Copyright (c) 2017-present, Elasticsearch BV\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/router';\nimport * as ɵngcc2 from '@elastic/apm-rum';\nconst APM = new InjectionToken('APM Base Client');\nconst ɵ0 = apm;\n\nclass ApmModule {}\n\nApmModule.ɵfac = function ApmModule_Factory(t) {\n  return new (t || ApmModule)();\n};\n\nApmModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: ApmModule\n});\nApmModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n  providers: [{\n    provide: APM,\n    useValue: ɵ0\n  }],\n  imports: [RouterModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ApmModule, [{\n    type: NgModule,\n    args: [{\n      imports: [RouterModule],\n      providers: [{\n        provide: APM,\n        useValue: ɵ0\n      }]\n    }]\n  }], null, null);\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ApmModule, {\n    imports: function () {\n      return [RouterModule];\n    }\n  });\n})();\n/**\n * MIT License\n *\n * Copyright (c) 2017-present, Elasticsearch BV\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n */\n\n\nclass ApmService {\n  constructor(apm, router, ngZone) {\n    this.apm = apm;\n    this.router = router;\n    this.ngZone = ngZone;\n  }\n\n  init(config) {\n    const apmInstance = this.ngZone.runOutsideAngular(() => this.apm.init(config));\n\n    if (!apmInstance.isActive()) {\n      return apmInstance;\n    }\n    /**\n     * Start listening to route change once we\n     * intiailize to set the correct transaction names\n     */\n\n\n    this.observe();\n    return apmInstance;\n  }\n\n  observe() {\n    let transaction;\n    this.router.events.subscribe(event => {\n      const eventName = event.toString();\n\n      if (eventName.indexOf('NavigationStart') >= 0) {\n        const name = event.url;\n        transaction = this.apm.startTransaction(name, 'route-change', {\n          managed: true,\n          canReuse: true\n        });\n      } else if (eventName.indexOf('NavigationError') >= 0) {\n        transaction && transaction.detectFinish();\n      } else if (eventName.indexOf('NavigationEnd') >= 0) {\n        if (!transaction) {\n          return;\n        }\n        /**\n         * The below logic must be placed in NavigationEnd since\n         * the we depend on the current route state to get the path\n         *\n         * Even If there are any redirects, the router state path\n         * will be matched with the correct url on navigation end\n         *\n         * Traverse the activated route tree to figure out the nested\n         * route path\n         */\n\n\n        const route = this.router.routerState.root.firstChild;\n\n        if (route) {\n          let child = route;\n          let path = '/' + child.routeConfig.path;\n\n          while (child) {\n            child = child.firstChild;\n\n            if (child && child.routeConfig) {\n              const currentPath = child.routeConfig.path;\n              /**\n               * Ignore empty path's in the route config\n               */\n\n              if (currentPath) {\n                path += '/' + currentPath;\n              }\n            }\n          }\n\n          transaction.name = path;\n        }\n\n        afterFrame(() => transaction.detectFinish());\n      }\n    });\n  }\n\n}\n\nApmService.ɵfac = function ApmService_Factory(t) {\n  return new (t || ApmService)(ɵngcc0.ɵɵinject(APM), ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nApmService.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function ApmService_Factory() {\n    return new ApmService(i0.ɵɵinject(APM), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i0.NgZone));\n  },\n  token: ApmService,\n  providedIn: \"root\"\n});\n\nApmService.ctorParameters = () => [{\n  type: ApmBase,\n  decorators: [{\n    type: Inject,\n    args: [APM]\n  }]\n}, {\n  type: Router\n}, {\n  type: NgZone\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ApmService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc2.ApmBase,\n      decorators: [{\n        type: Inject,\n        args: [APM]\n      }]\n    }, {\n      type: ɵngcc1.Router\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/**\n * MIT License\n *\n * Copyright (c) 2017-present, Elasticsearch BV\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n */\n\n\nclass ApmErrorHandler extends ErrorHandler {\n  constructor(apm) {\n    super();\n    this.apm = apm;\n  }\n\n  handleError(error) {\n    this.apm.captureError(error.originalError || error);\n    super.handleError(error);\n  }\n\n}\n\nApmErrorHandler.ɵfac = function ApmErrorHandler_Factory(t) {\n  return new (t || ApmErrorHandler)(ɵngcc0.ɵɵinject(APM));\n};\n\nApmErrorHandler.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: ApmErrorHandler,\n  factory: ApmErrorHandler.ɵfac\n});\n\nApmErrorHandler.ctorParameters = () => [{\n  type: ApmBase,\n  decorators: [{\n    type: Inject,\n    args: [APM]\n  }]\n}];\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ApmErrorHandler, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: ɵngcc2.ApmBase,\n      decorators: [{\n        type: Inject,\n        args: [APM]\n      }]\n    }];\n  }, null);\n})();\n/**\n * MIT License\n *\n * Copyright (c) 2017-present, Elasticsearch BV\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { APM, ApmErrorHandler, ApmModule, ApmService, ɵ0 };","map":{"version":3,"names":["i0","InjectionToken","NgModule","Injectable","Inject","NgZone","ErrorHandler","i2","RouterModule","Router","apm","ApmBase","afterFrame","ɵngcc0","ɵngcc1","ɵngcc2","APM","ɵ0","ApmModule","ɵfac","ApmModule_Factory","t","ɵmod","ɵɵdefineNgModule","type","ɵinj","ɵɵdefineInjector","providers","provide","useValue","imports","ngDevMode","ɵsetClassMetadata","args","ngJitMode","ɵɵsetNgModuleScope","ApmService","constructor","router","ngZone","init","config","apmInstance","runOutsideAngular","isActive","observe","transaction","events","subscribe","event","eventName","toString","indexOf","name","url","startTransaction","managed","canReuse","detectFinish","route","routerState","root","firstChild","child","path","routeConfig","currentPath","ApmService_Factory","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","ctorParameters","decorators","ApmErrorHandler","handleError","error","captureError","originalError","ApmErrorHandler_Factory"],"sources":["/home/ec2-user/elastic-apm-workshop/petclinic-frontend/node_modules/@elastic/apm-rum-angular/__ivy_ngcc__/fesm2015/elastic-apm-rum-angular.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, NgModule, Injectable, Inject, NgZone, ErrorHandler } from '@angular/core';\nimport * as i2 from '@angular/router';\nimport { RouterModule, Router } from '@angular/router';\nimport { apm, ApmBase } from '@elastic/apm-rum';\nimport { afterFrame } from '@elastic/apm-rum-core';\n\n/**\n * MIT License\n *\n * Copyright (c) 2017-present, Elasticsearch BV\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/router';\nimport * as ɵngcc2 from '@elastic/apm-rum';\nconst APM = new InjectionToken('APM Base Client');\nconst ɵ0 = apm;\nclass ApmModule {\n}\nApmModule.ɵfac = function ApmModule_Factory(t) { return new (t || ApmModule)(); };\nApmModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: ApmModule });\nApmModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [{ provide: APM, useValue: ɵ0 }], imports: [RouterModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ApmModule, [{\n        type: NgModule,\n        args: [{\n                imports: [RouterModule],\n                providers: [{ provide: APM, useValue: ɵ0 }]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ApmModule, { imports: function () { return [RouterModule]; } }); })();\n\n/**\n * MIT License\n *\n * Copyright (c) 2017-present, Elasticsearch BV\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n */\nclass ApmService {\n    constructor(apm, router, ngZone) {\n        this.apm = apm;\n        this.router = router;\n        this.ngZone = ngZone;\n    }\n    init(config) {\n        const apmInstance = this.ngZone.runOutsideAngular(() => this.apm.init(config));\n        if (!apmInstance.isActive()) {\n            return apmInstance;\n        }\n        /**\n         * Start listening to route change once we\n         * intiailize to set the correct transaction names\n         */\n        this.observe();\n        return apmInstance;\n    }\n    observe() {\n        let transaction;\n        this.router.events.subscribe(event => {\n            const eventName = event.toString();\n            if (eventName.indexOf('NavigationStart') >= 0) {\n                const name = event.url;\n                transaction = this.apm.startTransaction(name, 'route-change', {\n                    managed: true,\n                    canReuse: true\n                });\n            }\n            else if (eventName.indexOf('NavigationError') >= 0) {\n                transaction && transaction.detectFinish();\n            }\n            else if (eventName.indexOf('NavigationEnd') >= 0) {\n                if (!transaction) {\n                    return;\n                }\n                /**\n                 * The below logic must be placed in NavigationEnd since\n                 * the we depend on the current route state to get the path\n                 *\n                 * Even If there are any redirects, the router state path\n                 * will be matched with the correct url on navigation end\n                 *\n                 * Traverse the activated route tree to figure out the nested\n                 * route path\n                 */\n                const route = this.router.routerState.root.firstChild;\n                if (route) {\n                    let child = route;\n                    let path = '/' + child.routeConfig.path;\n                    while (child) {\n                        child = child.firstChild;\n                        if (child && child.routeConfig) {\n                            const currentPath = child.routeConfig.path;\n                            /**\n                             * Ignore empty path's in the route config\n                             */\n                            if (currentPath) {\n                                path += '/' + currentPath;\n                            }\n                        }\n                    }\n                    transaction.name = path;\n                }\n                afterFrame(() => transaction.detectFinish());\n            }\n        });\n    }\n}\nApmService.ɵfac = function ApmService_Factory(t) { return new (t || ApmService)(ɵngcc0.ɵɵinject(APM), ɵngcc0.ɵɵinject(ɵngcc1.Router), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nApmService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ApmService_Factory() { return new ApmService(i0.ɵɵinject(APM), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i0.NgZone)); }, token: ApmService, providedIn: \"root\" });\nApmService.ctorParameters = () => [\n    { type: ApmBase, decorators: [{ type: Inject, args: [APM,] }] },\n    { type: Router },\n    { type: NgZone }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ApmService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: ɵngcc2.ApmBase, decorators: [{\n                type: Inject,\n                args: [APM]\n            }] }, { type: ɵngcc1.Router }, { type: ɵngcc0.NgZone }]; }, null); })();\n\n/**\n * MIT License\n *\n * Copyright (c) 2017-present, Elasticsearch BV\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n */\nclass ApmErrorHandler extends ErrorHandler {\n    constructor(apm) {\n        super();\n        this.apm = apm;\n    }\n    handleError(error) {\n        this.apm.captureError(error.originalError || error);\n        super.handleError(error);\n    }\n}\nApmErrorHandler.ɵfac = function ApmErrorHandler_Factory(t) { return new (t || ApmErrorHandler)(ɵngcc0.ɵɵinject(APM)); };\nApmErrorHandler.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: ApmErrorHandler, factory: ApmErrorHandler.ɵfac });\nApmErrorHandler.ctorParameters = () => [\n    { type: ApmBase, decorators: [{ type: Inject, args: [APM,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ApmErrorHandler, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc2.ApmBase, decorators: [{\n                type: Inject,\n                args: [APM]\n            }] }]; }, null); })();\n\n/**\n * MIT License\n *\n * Copyright (c) 2017-present, Elasticsearch BV\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { APM, ApmErrorHandler, ApmModule, ApmService, ɵ0 };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}