{"ast":null,"code":"import { getInstrumentationFlags, PAGE_LOAD_DELAY, PAGE_LOAD, ERROR, CONFIG_SERVICE, LOGGING_SERVICE, TRANSACTION_SERVICE, PERFORMANCE_MONITORING, ERROR_LOGGING, APM_SERVER, EVENT_TARGET, CLICK, observePageVisibility, observePageClicks } from '@elastic/apm-rum-core';\n\nvar ApmBase = function () {\n  function ApmBase(serviceFactory, disable) {\n    this._disable = disable;\n    this.serviceFactory = serviceFactory;\n    this._initialized = false;\n  }\n\n  var _proto = ApmBase.prototype;\n\n  _proto.isEnabled = function isEnabled() {\n    return !this._disable;\n  };\n\n  _proto.isActive = function isActive() {\n    var configService = this.serviceFactory.getService(CONFIG_SERVICE);\n    return this.isEnabled() && this._initialized && configService.get('active');\n  };\n\n  _proto.init = function init(config) {\n    var _this = this;\n\n    if (this.isEnabled() && !this._initialized) {\n      this._initialized = true;\n\n      var _this$serviceFactory$ = this.serviceFactory.getService([CONFIG_SERVICE, LOGGING_SERVICE, TRANSACTION_SERVICE]),\n          configService = _this$serviceFactory$[0],\n          loggingService = _this$serviceFactory$[1],\n          transactionService = _this$serviceFactory$[2];\n\n      configService.setVersion('5.12.0');\n      this.config(config);\n      var logLevel = configService.get('logLevel');\n      loggingService.setLevel(logLevel);\n      var isConfigActive = configService.get('active');\n\n      if (isConfigActive) {\n        this.serviceFactory.init();\n        var flags = getInstrumentationFlags(configService.get('instrument'), configService.get('disableInstrumentations'));\n        var performanceMonitoring = this.serviceFactory.getService(PERFORMANCE_MONITORING);\n        performanceMonitoring.init(flags);\n\n        if (flags[ERROR]) {\n          var errorLogging = this.serviceFactory.getService(ERROR_LOGGING);\n          errorLogging.registerListeners();\n        }\n\n        if (configService.get('session')) {\n          var localConfig = configService.getLocalConfig();\n\n          if (localConfig && localConfig.session) {\n            configService.setConfig({\n              session: localConfig.session\n            });\n          }\n        }\n\n        var sendPageLoad = function sendPageLoad() {\n          return flags[PAGE_LOAD] && _this._sendPageLoadMetrics();\n        };\n\n        if (configService.get('centralConfig')) {\n          this.fetchCentralConfig().then(sendPageLoad);\n        } else {\n          sendPageLoad();\n        }\n\n        observePageVisibility(configService, transactionService);\n\n        if (flags[EVENT_TARGET] && flags[CLICK]) {\n          observePageClicks(transactionService);\n        }\n      } else {\n        this._disable = true;\n        loggingService.warn('RUM agent is inactive');\n      }\n    }\n\n    return this;\n  };\n\n  _proto.fetchCentralConfig = function fetchCentralConfig() {\n    var _this$serviceFactory$2 = this.serviceFactory.getService([APM_SERVER, LOGGING_SERVICE, CONFIG_SERVICE]),\n        apmServer = _this$serviceFactory$2[0],\n        loggingService = _this$serviceFactory$2[1],\n        configService = _this$serviceFactory$2[2];\n\n    return apmServer.fetchConfig(configService.get('serviceName'), configService.get('environment')).then(function (config) {\n      var transactionSampleRate = config['transaction_sample_rate'];\n\n      if (transactionSampleRate) {\n        transactionSampleRate = Number(transactionSampleRate);\n        var _config2 = {\n          transactionSampleRate: transactionSampleRate\n        };\n\n        var _configService$valida = configService.validate(_config2),\n            invalid = _configService$valida.invalid;\n\n        if (invalid.length === 0) {\n          configService.setConfig(_config2);\n        } else {\n          var _invalid$ = invalid[0],\n              key = _invalid$.key,\n              value = _invalid$.value,\n              allowed = _invalid$.allowed;\n          loggingService.warn(\"invalid value \\\"\" + value + \"\\\" for \" + key + \". Allowed: \" + allowed + \".\");\n        }\n      }\n\n      return config;\n    }).catch(function (error) {\n      loggingService.warn('failed fetching config:', error);\n    });\n  };\n\n  _proto._sendPageLoadMetrics = function _sendPageLoadMetrics() {\n    var tr = this.startTransaction(undefined, PAGE_LOAD, {\n      managed: true,\n      canReuse: true\n    });\n\n    if (!tr) {\n      return;\n    }\n\n    tr.addTask(PAGE_LOAD);\n\n    var sendPageLoadMetrics = function sendPageLoadMetrics() {\n      setTimeout(function () {\n        return tr.removeTask(PAGE_LOAD);\n      }, PAGE_LOAD_DELAY);\n    };\n\n    if (document.readyState === 'complete') {\n      sendPageLoadMetrics();\n    } else {\n      window.addEventListener('load', sendPageLoadMetrics);\n    }\n  };\n\n  _proto.observe = function observe(name, fn) {\n    var configService = this.serviceFactory.getService(CONFIG_SERVICE);\n    configService.events.observe(name, fn);\n  };\n\n  _proto.config = function config(_config) {\n    var _this$serviceFactory$3 = this.serviceFactory.getService([CONFIG_SERVICE, LOGGING_SERVICE]),\n        configService = _this$serviceFactory$3[0],\n        loggingService = _this$serviceFactory$3[1];\n\n    var _configService$valida2 = configService.validate(_config),\n        missing = _configService$valida2.missing,\n        invalid = _configService$valida2.invalid,\n        unknown = _configService$valida2.unknown;\n\n    if (unknown.length > 0) {\n      var message = 'Unknown config options are specified for RUM agent: ' + unknown.join(', ');\n      loggingService.warn(message);\n    }\n\n    if (missing.length === 0 && invalid.length === 0) {\n      configService.setConfig(_config);\n    } else {\n      var separator = ', ';\n      var _message = \"RUM agent isn't correctly configured. \";\n\n      if (missing.length > 0) {\n        _message += missing.join(separator) + ' is missing';\n\n        if (invalid.length > 0) {\n          _message += separator;\n        }\n      }\n\n      invalid.forEach(function (_ref, index) {\n        var key = _ref.key,\n            value = _ref.value,\n            allowed = _ref.allowed;\n        _message += key + \" \\\"\" + value + \"\\\" contains invalid characters! (allowed: \" + allowed + \")\" + (index !== invalid.length - 1 ? separator : '');\n      });\n      loggingService.error(_message);\n      configService.setConfig({\n        active: false\n      });\n    }\n  };\n\n  _proto.setUserContext = function setUserContext(userContext) {\n    var configService = this.serviceFactory.getService(CONFIG_SERVICE);\n    configService.setUserContext(userContext);\n  };\n\n  _proto.setCustomContext = function setCustomContext(customContext) {\n    var configService = this.serviceFactory.getService(CONFIG_SERVICE);\n    configService.setCustomContext(customContext);\n  };\n\n  _proto.addLabels = function addLabels(labels) {\n    var configService = this.serviceFactory.getService(CONFIG_SERVICE);\n    configService.addLabels(labels);\n  };\n\n  _proto.setInitialPageLoadName = function setInitialPageLoadName(name) {\n    var configService = this.serviceFactory.getService(CONFIG_SERVICE);\n    configService.setConfig({\n      pageLoadTransactionName: name\n    });\n  };\n\n  _proto.startTransaction = function startTransaction(name, type, options) {\n    if (this.isEnabled()) {\n      var transactionService = this.serviceFactory.getService(TRANSACTION_SERVICE);\n      return transactionService.startTransaction(name, type, options);\n    }\n  };\n\n  _proto.startSpan = function startSpan(name, type, options) {\n    if (this.isEnabled()) {\n      var transactionService = this.serviceFactory.getService(TRANSACTION_SERVICE);\n      return transactionService.startSpan(name, type, options);\n    }\n  };\n\n  _proto.getCurrentTransaction = function getCurrentTransaction() {\n    if (this.isEnabled()) {\n      var transactionService = this.serviceFactory.getService(TRANSACTION_SERVICE);\n      return transactionService.getCurrentTransaction();\n    }\n  };\n\n  _proto.captureError = function captureError(error) {\n    if (this.isEnabled()) {\n      var errorLogging = this.serviceFactory.getService(ERROR_LOGGING);\n      return errorLogging.logError(error);\n    }\n  };\n\n  _proto.addFilter = function addFilter(fn) {\n    var configService = this.serviceFactory.getService(CONFIG_SERVICE);\n    configService.addFilter(fn);\n  };\n\n  return ApmBase;\n}();\n\nexport { ApmBase as default };","map":null,"metadata":{},"sourceType":"module"}