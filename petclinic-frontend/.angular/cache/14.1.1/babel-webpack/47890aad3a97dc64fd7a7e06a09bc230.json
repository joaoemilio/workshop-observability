{"ast":null,"code":"import { Promise } from './polyfills';\nimport { NAVIGATION_TIMING_MARKS, COMPRESSED_NAV_TIMING_MARKS } from '../performance-monitoring/capture-navigation';\nimport { isBeaconInspectionEnabled } from './utils';\n\nfunction compressStackFrames(frames) {\n  return frames.map(function (frame) {\n    return {\n      ap: frame.abs_path,\n      f: frame.filename,\n      fn: frame.function,\n      li: frame.lineno,\n      co: frame.colno\n    };\n  });\n}\n\nfunction compressResponse(response) {\n  return {\n    ts: response.transfer_size,\n    ebs: response.encoded_body_size,\n    dbs: response.decoded_body_size\n  };\n}\n\nfunction compressHTTP(http) {\n  var compressed = {};\n  var method = http.method,\n      status_code = http.status_code,\n      url = http.url,\n      response = http.response;\n  compressed.url = url;\n\n  if (method) {\n    compressed.mt = method;\n  }\n\n  if (status_code) {\n    compressed.sc = status_code;\n  }\n\n  if (response) {\n    compressed.r = compressResponse(response);\n  }\n\n  return compressed;\n}\n\nfunction compressContext(context) {\n  if (!context) {\n    return null;\n  }\n\n  var compressed = {};\n  var page = context.page,\n      http = context.http,\n      response = context.response,\n      destination = context.destination,\n      user = context.user,\n      custom = context.custom;\n\n  if (page) {\n    compressed.p = {\n      rf: page.referer,\n      url: page.url\n    };\n  }\n\n  if (http) {\n    compressed.h = compressHTTP(http);\n  }\n\n  if (response) {\n    compressed.r = compressResponse(response);\n  }\n\n  if (destination) {\n    var service = destination.service;\n    compressed.dt = {\n      se: {\n        n: service.name,\n        t: service.type,\n        rc: service.resource\n      },\n      ad: destination.address,\n      po: destination.port\n    };\n  }\n\n  if (user) {\n    compressed.u = {\n      id: user.id,\n      un: user.username,\n      em: user.email\n    };\n  }\n\n  if (custom) {\n    compressed.cu = custom;\n  }\n\n  return compressed;\n}\n\nfunction compressMarks(marks) {\n  if (!marks) {\n    return null;\n  }\n\n  var compressedNtMarks = compressNavigationTimingMarks(marks.navigationTiming);\n  var compressed = {\n    nt: compressedNtMarks,\n    a: compressAgentMarks(compressedNtMarks, marks.agent)\n  };\n  return compressed;\n}\n\nfunction compressNavigationTimingMarks(ntMarks) {\n  if (!ntMarks) {\n    return null;\n  }\n\n  var compressed = {};\n  COMPRESSED_NAV_TIMING_MARKS.forEach(function (mark, index) {\n    var mapping = NAVIGATION_TIMING_MARKS[index];\n    compressed[mark] = ntMarks[mapping];\n  });\n  return compressed;\n}\n\nfunction compressAgentMarks(compressedNtMarks, agentMarks) {\n  var compressed = {};\n\n  if (compressedNtMarks) {\n    compressed = {\n      fb: compressedNtMarks.rs,\n      di: compressedNtMarks.di,\n      dc: compressedNtMarks.dc\n    };\n  }\n\n  if (agentMarks) {\n    var fp = agentMarks.firstContentfulPaint;\n    var lp = agentMarks.largestContentfulPaint;\n\n    if (fp) {\n      compressed.fp = fp;\n    }\n\n    if (lp) {\n      compressed.lp = lp;\n    }\n  }\n\n  if (Object.keys(compressed).length === 0) {\n    return null;\n  }\n\n  return compressed;\n}\n\nexport function compressMetadata(metadata) {\n  var service = metadata.service,\n      labels = metadata.labels;\n  var agent = service.agent,\n      language = service.language;\n  return {\n    se: {\n      n: service.name,\n      ve: service.version,\n      a: {\n        n: agent.name,\n        ve: agent.version\n      },\n      la: {\n        n: language.name\n      },\n      en: service.environment\n    },\n    l: labels\n  };\n}\nexport function compressTransaction(transaction) {\n  var spans = transaction.spans.map(function (span) {\n    var spanData = {\n      id: span.id,\n      n: span.name,\n      t: span.type,\n      s: span.start,\n      d: span.duration,\n      c: compressContext(span.context),\n      o: span.outcome,\n      sr: span.sample_rate\n    };\n\n    if (span.parent_id !== transaction.id) {\n      spanData.pid = span.parent_id;\n    }\n\n    if (span.sync === true) {\n      spanData.sy = true;\n    }\n\n    if (span.subtype) {\n      spanData.su = span.subtype;\n    }\n\n    if (span.action) {\n      spanData.ac = span.action;\n    }\n\n    return spanData;\n  });\n  var tr = {\n    id: transaction.id,\n    tid: transaction.trace_id,\n    n: transaction.name,\n    t: transaction.type,\n    d: transaction.duration,\n    c: compressContext(transaction.context),\n    k: compressMarks(transaction.marks),\n    me: compressMetricsets(transaction.breakdown),\n    y: spans,\n    yc: {\n      sd: spans.length\n    },\n    sm: transaction.sampled,\n    sr: transaction.sample_rate,\n    o: transaction.outcome\n  };\n\n  if (transaction.experience) {\n    var _transaction$experien = transaction.experience,\n        cls = _transaction$experien.cls,\n        fid = _transaction$experien.fid,\n        tbt = _transaction$experien.tbt,\n        longtask = _transaction$experien.longtask;\n    tr.exp = {\n      cls: cls,\n      fid: fid,\n      tbt: tbt,\n      lt: longtask\n    };\n  }\n\n  if (transaction.session) {\n    var _transaction$session = transaction.session,\n        id = _transaction$session.id,\n        sequence = _transaction$session.sequence;\n    tr.ses = {\n      id: id,\n      seq: sequence\n    };\n  }\n\n  return tr;\n}\nexport function compressError(error) {\n  var exception = error.exception;\n  var compressed = {\n    id: error.id,\n    cl: error.culprit,\n    ex: {\n      mg: exception.message,\n      st: compressStackFrames(exception.stacktrace),\n      t: error.type\n    },\n    c: compressContext(error.context)\n  };\n  var transaction = error.transaction;\n\n  if (transaction) {\n    compressed.tid = error.trace_id;\n    compressed.pid = error.parent_id;\n    compressed.xid = error.transaction_id;\n    compressed.x = {\n      t: transaction.type,\n      sm: transaction.sampled\n    };\n  }\n\n  return compressed;\n}\nexport function compressMetricsets(breakdowns) {\n  return breakdowns.map(function (_ref) {\n    var span = _ref.span,\n        samples = _ref.samples;\n    var isSpan = span != null;\n\n    if (isSpan) {\n      return {\n        y: {\n          t: span.type\n        },\n        sa: {\n          ysc: {\n            v: samples['span.self_time.count'].value\n          },\n          yss: {\n            v: samples['span.self_time.sum.us'].value\n          }\n        }\n      };\n    }\n\n    return {\n      sa: {\n        xdc: {\n          v: samples['transaction.duration.count'].value\n        },\n        xds: {\n          v: samples['transaction.duration.sum.us'].value\n        },\n        xbc: {\n          v: samples['transaction.breakdown.count'].value\n        }\n      }\n    };\n  });\n}\nexport function compressPayload(params, type) {\n  if (type === void 0) {\n    type = 'gzip';\n  }\n\n  var isCompressionStreamSupported = typeof CompressionStream === 'function';\n  return new Promise(function (resolve) {\n    if (!isCompressionStreamSupported) {\n      return resolve(params);\n    }\n\n    if (isBeaconInspectionEnabled()) {\n      return resolve(params);\n    }\n\n    var payload = params.payload,\n        headers = params.headers,\n        beforeSend = params.beforeSend;\n    var payloadStream = new Blob([payload]).stream();\n    var compressedStream = payloadStream.pipeThrough(new CompressionStream(type));\n    return new Response(compressedStream).blob().then(function (payload) {\n      headers['Content-Encoding'] = type;\n      return resolve({\n        payload: payload,\n        headers: headers,\n        beforeSend: beforeSend\n      });\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"module"}