{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport { catchError } from 'rxjs/internal/operators';\nimport { HttpErrorHandler } from '../error.service';\nimport { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../error.service\";\nexport let SpecialtyService = /*#__PURE__*/(() => {\n  class SpecialtyService {\n    constructor(http, httpErrorHandler) {\n      this.http = http;\n      this.httpErrorHandler = httpErrorHandler;\n      this.entityUrl = environment.REST_API_URL + 'specialties';\n      this.handlerError = httpErrorHandler.createHandleError('OwnerService');\n    }\n\n    getSpecialties() {\n      return this.http.get(this.entityUrl).pipe(catchError(this.handlerError('getSpecialties', [])));\n    }\n\n    getSpecialtyById(specId) {\n      return this.http.get(this.entityUrl + '/' + specId).pipe(catchError(this.handlerError('getSpecialtyById', {})));\n    }\n\n    addSpecialty(specialty) {\n      return this.http.post(this.entityUrl, specialty).pipe(catchError(this.handlerError('addSpecialty', specialty)));\n    }\n\n    updateSpecialty(specId, specialty) {\n      return this.http.put(this.entityUrl + '/' + specId, specialty).pipe(catchError(this.handlerError('updateSpecialty', specialty)));\n    }\n\n    deleteSpecialty(specId) {\n      return this.http.delete(this.entityUrl + '/' + specId).pipe(catchError(this.handlerError('deleteSpecialty', 0)));\n    }\n\n  }\n\n  SpecialtyService.ɵfac = function SpecialtyService_Factory(t) {\n    return new (t || SpecialtyService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.HttpErrorHandler));\n  };\n\n  SpecialtyService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SpecialtyService,\n    factory: SpecialtyService.ɵfac\n  });\n  return SpecialtyService;\n})();","map":null,"metadata":{},"sourceType":"module"}