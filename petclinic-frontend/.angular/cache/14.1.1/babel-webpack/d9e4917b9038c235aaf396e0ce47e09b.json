{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { HTTP_REQUEST_TIMEOUT } from '../constants';\nimport { isResponseSuccessful } from './response-status';\nexport var BYTE_LIMIT = 60 * 1000;\nexport function shouldUseFetchWithKeepAlive(method, payload) {\n  if (!isFetchSupported()) {\n    return false;\n  }\n\n  var isKeepAliveSupported = ('keepalive' in new Request(''));\n\n  if (!isKeepAliveSupported) {\n    return false;\n  }\n\n  var size = calculateSize(payload);\n  return method === 'POST' && size < BYTE_LIMIT;\n}\nexport function sendFetchRequest(method, url, _ref) {\n  var _ref$keepalive = _ref.keepalive,\n      keepalive = _ref$keepalive === void 0 ? false : _ref$keepalive,\n      _ref$timeout = _ref.timeout,\n      timeout = _ref$timeout === void 0 ? HTTP_REQUEST_TIMEOUT : _ref$timeout,\n      payload = _ref.payload,\n      headers = _ref.headers,\n      sendCredentials = _ref.sendCredentials;\n  var timeoutConfig = {};\n\n  if (typeof AbortController === 'function') {\n    var controller = new AbortController();\n    timeoutConfig.signal = controller.signal;\n    setTimeout(function () {\n      return controller.abort();\n    }, timeout);\n  }\n\n  var fetchResponse;\n  return window.fetch(url, _extends({\n    body: payload,\n    headers: headers,\n    method: method,\n    keepalive: keepalive,\n    credentials: sendCredentials ? 'include' : 'omit'\n  }, timeoutConfig)).then(function (response) {\n    fetchResponse = response;\n    return fetchResponse.text();\n  }).then(function (responseText) {\n    var bodyResponse = {\n      url: url,\n      status: fetchResponse.status,\n      responseText: responseText\n    };\n\n    if (!isResponseSuccessful(fetchResponse.status)) {\n      throw bodyResponse;\n    }\n\n    return bodyResponse;\n  });\n}\nexport function isFetchSupported() {\n  return typeof window.fetch === 'function' && typeof window.Request === 'function';\n}\n\nfunction calculateSize(payload) {\n  if (!payload) {\n    return 0;\n  }\n\n  if (payload instanceof Blob) {\n    return payload.size;\n  }\n\n  return new Blob([payload]).size;\n}","map":null,"metadata":{},"sourceType":"module"}