{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * SpanContext represents Span state that must propagate to descendant Spans\n * and across process boundaries.\n *\n * SpanContext is logically divided into two pieces: the user-level \"Baggage\"\n * (see setBaggageItem and getBaggageItem) that propagates across Span\n * boundaries and any Tracer-implementation-specific fields that are needed to\n * identify or otherwise contextualize the associated Span instance (e.g., a\n * <trace_id, span_id, sampled> tuple).\n */\n\nvar SpanContext =\n/** @class */\nfunction () {\n  function SpanContext() {} // The SpanContext is entirely implementation dependent\n\n  /**\n   * Returns a string representation of the implementation internal trace ID.\n   *\n   * @returns {string}\n   */\n\n\n  SpanContext.prototype.toTraceId = function () {\n    return '';\n  };\n  /**\n   * Returns a string representation of the implementation internal span ID.\n   *\n   * @returns {string}\n   */\n\n\n  SpanContext.prototype.toSpanId = function () {\n    return '';\n  };\n\n  return SpanContext;\n}();\n\nexports.SpanContext = SpanContext;\nexports.default = SpanContext; //# sourceMappingURL=span_context.js.map","map":null,"metadata":{},"sourceType":"script"}