{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar span_1 = require(\"./span\");\n/**\n * Reference pairs a reference type constant (e.g., REFERENCE_CHILD_OF or\n * REFERENCE_FOLLOWS_FROM) with the SpanContext it points to.\n *\n * See the exported childOf() and followsFrom() functions at the package level.\n */\n\n\nvar Reference =\n/** @class */\nfunction () {\n  /**\n   * Initialize a new Reference instance.\n   *\n   * @param {string} type - the Reference type constant (e.g.,\n   *        REFERENCE_CHILD_OF or REFERENCE_FOLLOWS_FROM).\n   * @param {SpanContext} referencedContext - the SpanContext being referred\n   *        to. As a convenience, a Span instance may be passed in instead\n   *        (in which case its .context() is used here).\n   */\n  function Reference(type, referencedContext) {\n    this._type = type;\n    this._referencedContext = referencedContext instanceof span_1.default ? referencedContext.context() : referencedContext;\n  }\n  /**\n   * @return {string} The Reference type (e.g., REFERENCE_CHILD_OF or\n   *         REFERENCE_FOLLOWS_FROM).\n   */\n\n\n  Reference.prototype.type = function () {\n    return this._type;\n  };\n  /**\n   * @return {SpanContext} The SpanContext being referred to (e.g., the\n   *         parent in a REFERENCE_CHILD_OF Reference).\n   */\n\n\n  Reference.prototype.referencedContext = function () {\n    return this._referencedContext;\n  };\n\n  return Reference;\n}();\n\nexports.default = Reference; //# sourceMappingURL=reference.js.map","map":null,"metadata":{},"sourceType":"script"}