{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport { HttpErrorHandler } from '../error.service';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError } from 'rxjs/internal/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../error.service\";\nexport let VisitService = /*#__PURE__*/(() => {\n  class VisitService {\n    constructor(http, httpErrorHandler) {\n      this.http = http;\n      this.httpErrorHandler = httpErrorHandler;\n      this.entityUrl = environment.REST_API_URL + 'visits';\n      this.handlerError = httpErrorHandler.createHandleError('OwnerService');\n    }\n\n    getVisits() {\n      return this.http.get(this.entityUrl).pipe(catchError(this.handlerError('getVisits', [])));\n    }\n\n    getVisitById(visitId) {\n      return this.http.get(this.entityUrl + '/' + visitId).pipe(catchError(this.handlerError('getVisitById', {})));\n    }\n\n    addVisit(visit) {\n      const ownerId = visit.pet.ownerId;\n      const petId = visit.pet.id;\n      const visitsUrl = environment.REST_API_URL + `owners/${ownerId}/pets/${petId}/visits`;\n      return this.http.post(visitsUrl, visit).pipe(catchError(this.handlerError('addVisit', visit)));\n    }\n\n    updateVisit(visitId, visit) {\n      return this.http.put(this.entityUrl + '/' + visitId, visit).pipe(catchError(this.handlerError('updateVisit', visit)));\n    }\n\n    deleteVisit(visitId) {\n      return this.http.delete(this.entityUrl + '/' + visitId).pipe(catchError(this.handlerError('deleteVisit', 0)));\n    }\n\n  }\n\n  VisitService.ɵfac = function VisitService_Factory(t) {\n    return new (t || VisitService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.HttpErrorHandler));\n  };\n\n  VisitService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: VisitService,\n    factory: VisitService.ɵfac\n  });\n  return VisitService;\n})();","map":null,"metadata":{},"sourceType":"module"}